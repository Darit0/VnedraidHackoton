import java.net.*;
import java.net.http.*;
import java.time.Duration;
import java.util.*;
import java.util.concurrent.CompletableFuture;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import vnedraid.analyze.LLM.OrionGptClient;

public class HHVacancyClassifier {

    // === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
    private static final String HH_API_URL = "https://api.hh.ru/vacancies";
    private static final String ORION_API_KEY = "OrVrQoQ6T43vk0McGmHOsdvvTiX446RJ";
    private static final int OS_CODE = 12;
    private static final String USER_DOMAIN = "team61";

    private static final ObjectMapper mapper = new ObjectMapper();
    private static final OrionGptClient gptClient = new OrionGptClient(OS_CODE, ORION_API_KEY, USER_DOMAIN);

    // === –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π ===
    private static final Set<String> FILTER_KEYWORDS = new HashSet<>(Arrays.asList(
            "java", "python", "—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", "frontend", "backend", "devops", "qa", "engineer",
            "–æ—Ñ–∏—Å", "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "–º–µ–Ω–µ–¥–∂–µ—Ä", "–±—É—Ö–≥–∞–ª—Ç–µ—Ä", "—Å–∫–ª–∞–¥", "–∫–ª–∞–¥–æ–≤—â–∏–∫", "–¥–æ—Å—Ç–∞–≤–∫–∞", "–∫—É—Ä—å–µ—Ä"
    ));

    // === –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–π ===
    private static final Map<String, String> CUSTOM_TITLES = new HashMap<>();

    public static void main(String[] args) throws Exception {
        HttpClient client = HttpClient.newHttpClient();

        String searchUrl = HH_API_URL + "?text=–≤—Å–µ&area=113&per_page=5";
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(searchUrl))
                .timeout(Duration.ofSeconds(10))
                .GET()
                .build();

        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
        JsonNode searchResult = mapper.readTree(response.body());

        for (JsonNode item : searchResult.get("items")) {
            String vacancyId = item.get("id").asText();
            filterAndClassify(vacancyId, client);
        }
    }

    private static void filterAndClassify(String vacancyId, HttpClient client) throws Exception {
        System.out.println("\n=== –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é: " + vacancyId + " ===");

        String vacancyUrl = "https://api.hh.ru/vacancies/"  + vacancyId;
        HttpRequest vacancyRequest = HttpRequest.newBuilder()
                .uri(URI.create(vacancyUrl))
                .GET()
                .build();

        HttpResponse<String> vacancyResponse = client.send(vacancyRequest, HttpResponse.BodyHandlers.ofString());
        JsonNode vacancyData = mapper.readTree(vacancyResponse.body());

        String title = vacancyData.has("name") ? vacancyData.get("name").asText().toLowerCase() : "";
        String description = vacancyData.has("description") ? vacancyData.get("description").asText().toLowerCase() : "";

        if (!containsAnyKeyword(title + " " + description, FILTER_KEYWORDS)) {
            System.out.println("‚ùå –í–∞–∫–∞–Ω—Å–∏—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.");
            return;
        }

        classifyVacancy(vacancyId, vacancyData);
    }

    private static void classifyVacancy(String vacancyId, JsonNode vacancyData) throws Exception {
        System.out.println("‚úÖ –í–∞–∫–∞–Ω—Å–∏—è –ø—Ä–æ—à–ª–∞ —Ñ–∏–ª—å—Ç—Ä. –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑...");

        String title = vacancyData.has("name") ? vacancyData.get("name").asText() : "";
        String city = vacancyData.has("area") && vacancyData.get("area").has("name")
                ? vacancyData.get("area").get("name").asText() : "";

        Integer salaryFrom = vacancyData.has("salary") && vacancyData.get("salary").has("from")
                ? vacancyData.get("salary").get("from").asInt() : null;

        Integer salaryTo = vacancyData.has("salary") && vacancyData.get("salary").has("to")
                ? vacancyData.get("salary").get("to").asInt() : null;

        String description = vacancyData.has("description") ? vacancyData.get("description").asText() : "";
        String workFormat = vacancyData.has("schedule") && vacancyData.get("schedule").has("name")
                ? vacancyData.get("schedule").get("name").asText() : "";
        String publishedAt = vacancyData.has("published_at") ? vacancyData.get("published_at").asText() : "";

        String dialogId = USER_DOMAIN + "_vac_" + vacancyId;
        String cleanDescription = preprocess(description);

        if (CUSTOM_TITLES.containsKey(cleanDescription)) {
            String cachedTitle = CUSTOM_TITLES.get(cleanDescription);
            System.out.println("üìå –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: " + cachedTitle);
            outputResult(cachedTitle, vacancyData, city, salaryFrom, salaryTo, workFormat, publishedAt);
            return;
        }

        String prompt = buildPrompt(title, description);
        CompletableFuture<Void> sendFuture = gptClient.sendMessage(dialogId, prompt).thenRunAsync(() -> {
            try {
                Thread.sleep(5000); // –ñ–¥—ë–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
                String answer = extractAnswer(gptClient.getResponse(dialogId).get());

                System.out.println("üîç –û—Ç–≤–µ—Ç –æ—Ç LLM: '" + answer + "'");

                String jobTitle;

                // –ï—Å–ª–∏ LLM –Ω–µ —Å–º–æ–≥–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                if (answer.equalsIgnoreCase("–Ω–∏—á–µ–≥–æ") || answer.equals("–ù–µ –Ω–∞–π–¥–µ–Ω–æ")) {
                    System.out.println("üß† –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ...");
                    jobTitle = generateCustomTitle(title, description);
                } else {
                    jobTitle = answer.trim();
                }

                CUSTOM_TITLES.put(cleanDescription, jobTitle); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                gptClient.completeSession(dialogId);

                outputResult(jobTitle, vacancyData, city, salaryFrom, salaryTo, workFormat, publishedAt);

            } catch (Exception e) {
                System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞–∫–∞–Ω—Å–∏–∏: " + e.getMessage());
                try {
                    String fallbackTitle = generateCustomTitle(title, description);
                    outputResult(fallbackTitle, vacancyData, city, salaryFrom, salaryTo, workFormat, publishedAt);
                } catch (Exception ex) {
                    try {
                        outputResult("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è", vacancyData, city, salaryFrom, salaryTo, workFormat, publishedAt);
                    } catch (Exception exc) {
                        throw new RuntimeException(exc);
                    }
                }
            }
        });

        sendFuture.join(); // –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    }

    private static void outputResult(String jobTitle, JsonNode vacancyData, String city,
                                     Integer salaryFrom, Integer salaryTo, String workFormat,
                                     String publishedAt) throws Exception {
        Map<String, Object> result = new LinkedHashMap<>();
        result.put("jobTitle", jobTitle);
        result.put("city", city);
        result.put("salary_from", salaryFrom);
        result.put("salary_to", salaryTo);
        result.put("gender", "");
        result.put("experience", new ArrayList<>());
        result.put("age", new ArrayList<>());
        result.put("education", "");
        result.put("work_format", workFormat);
        result.put("description", vacancyData.get("description").asText());
        result.put("category_of_car_rights", "");
        result.put("data_of_publication", publishedAt);

        String jsonResponse = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(result);
        System.out.println("\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:");
        System.out.println(jsonResponse);
    }

    private static boolean containsAnyKeyword(String text, Set<String> keywords) {
        for (String keyword : keywords) {
            if (text.contains(keyword)) {
                return true;
            }
        }
        return false;
    }

    private static String buildPrompt(String title, String description) {
        return """
                –¢—ã —è–≤–ª—è–µ—à—å—Å—è –ø–æ–º–æ—â–Ω–∏–∫–æ–º HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.
                –ù–∏–∂–µ —Ç–µ–±–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—è:
                
                –ó–∞–≥–æ–ª–æ–≤–æ–∫: %s
                –û–ø–∏—Å–∞–Ω–∏–µ: %s
                
                –û–ø—Ä–µ–¥–µ–ª–∏, –∫–∞–∫–∞—è —ç—Ç–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤. –í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:
                - Java Developer
                - Frontend Developer
                - DevOps Engineer
                - QA Engineer
                - Product Manager
                - Data Scientist
                - C++ Developer
                - Python Developer
                - Mobile Developer
                - –ö–ª–∞–¥–æ–≤—â–∏–∫
                - –ì—Ä—É–∑—á–∏–∫
                - –î–æ—Å—Ç–∞–≤—â–∏–∫
                - –ö—É—Ä—å–µ—Ä
                - –ë—É–≥—Ö–∞–ª—Ç–µ—Ä
                - –°–µ–∫—Ä–µ—Ç–∞—Ä—à–∞
                - –ú–µ–Ω–µ–¥–∂–µ—Ä
                - –Æ—Ä–∏—Å—Ç
                
                –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç ‚Äî –Ω–∞–ø–∏—à–∏ '–Ω–∏—á–µ–≥–æ'.
                –ù–µ –¥–æ–±–∞–≤–ª—è–π –æ–±—ä—è—Å–Ω–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç.
                """.formatted(title, description);
    }

    private static String generateCustomTitle(String title, String description) throws Exception {
        String prompt = """
            –¢—ã —è–≤–ª—è–µ—à—å—Å—è –ø–æ–º–æ—â–Ω–∏–∫–æ–º HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.
            –ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ –ø—Ä–∏–¥—É–º–∞–π –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ (–æ–¥–Ω–æ —Å–ª–æ–≤–æ –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–∞—è —Ñ—Ä–∞–∑–∞).
            –ù–µ –¥–æ–±–∞–≤–ª—è–π –æ–±—ä—è—Å–Ω–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ —Å–∞–º–æ –Ω–∞–∑–≤–∞–Ω–∏–µ.
            
            –ó–∞–≥–æ–ª–æ–≤–æ–∫: %s
            –û–ø–∏—Å–∞–Ω–∏–µ: %s
            
            –ü—Ä–∏–º–µ—Ä—ã:
            - –õ–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫
            - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ñ–∏—Å–∞
            - –ö–ª–∞–¥–æ–≤—â–∏–∫
            - Java Developer
            """.formatted(title, description);

        String dialogId = UUID.randomUUID().toString();
        gptClient.sendMessage(dialogId, prompt).get();
        Thread.sleep(5000);
        String rawAnswer = extractAnswer(gptClient.getResponse(dialogId).get());
        gptClient.completeSession(dialogId);

        String generatedTitle = rawAnswer.trim();
        System.out.println("üß† –ü—Ä–∏–¥—É–º–∞–Ω–æ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: " + generatedTitle);
        return generatedTitle;
    }

    private static String extractAnswer(String jsonResponse) {
        System.out.println("üîç –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –æ—Ç LLM: " + jsonResponse); // ‚úÖ –î–æ–±–∞–≤–∏–ª–∏ –≤—ã–≤–æ–¥
        try {
            JsonNode node = mapper.readTree(jsonResponse);
            return node.has("message") ? node.get("message").asText().trim() : "–ù–µ –Ω–∞–π–¥–µ–Ω–æ";
        } catch (Exception e) {
            return "–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞";
        }
    }

    private static String preprocess(String description) {
        return description.toLowerCase().replaceAll("\\s+", " ").trim();
    }
}