package vnedraid.analyze.dataFilter;

import vnedraid.analyze.LLM.OrionGptClient;

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.TimeUnit;

public class HHVacancyClassifier {

    private static final OrionGptClient gptClient = new OrionGptClient(
            1, "Team0MYSiPLOee4F", "example.com");
    private static final String DIALOG_ID = "vacancy_classifier_dialog_001";

    public static void main(String[] args) throws Exception {
        String title = "Java –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫";
        String description = "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ backend-—á–∞—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ Java. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Spring Boot, Hibernate.";

        classifyVacancy(title, description).thenAccept(System.out::println);
    }

    public static CompletableFuture<String> classifyVacancy(String title, String description) {
        String prompt = """
                –¢—ã —è–≤–ª—è–µ—à—å—Å—è –ø–æ–º–æ—â–Ω–∏–∫–æ–º HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.
                –ù–∏–∂–µ —Ç–µ–±–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—è:
                
                –ó–∞–≥–æ–ª–æ–≤–æ–∫: %s
                –û–ø–∏—Å–∞–Ω–∏–µ: %s
                
                –û–ø—Ä–µ–¥–µ–ª–∏, –∫–∞–∫–∞—è —ç—Ç–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤. –í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:
                - Java Developer
                - Frontend Developer
                - DevOps Engineer
                - QA Engineer
                - Product Manager
                - Data Scientist
                - C++ Developer
                - Python Developer
                - Mobile Developer
                - –ö–ª–∞–¥–æ–≤—â–∏–∫
                - –ì—Ä—É–∑—á–∏–∫
                - –î–æ—Å—Ç–∞–≤—â–∏–∫
                - –ö—É—Ä—å–µ—Ä
                - –ë—É—Ö–≥–∞–ª—Ç–µ—Ä
                - –°–µ–∫—Ä–µ—Ç–∞—Ä—å
                - –ú–µ–Ω–µ–¥–∂–µ—Ä
                - –Æ—Ä–∏—Å—Ç
                
                –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç ‚Äî –Ω–∞–ø–∏—à–∏ '–Ω–∏—á–µ–≥–æ'.
                –ù–µ –¥–æ–±–∞–≤–ª—è–π –æ–±—ä—è—Å–Ω–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç.
                """.formatted(title, description);

        try {
            return gptClient.sendMessage(DIALOG_ID, prompt)
                    .thenAccept(response -> System.out.println("üì© –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ."))
                    .thenCompose(v ->
                            // –ó–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º –æ—Ç–≤–µ—Ç–∞
                            CompletableFuture.runAsync(() -> {},
                                    CompletableFuture.delayedExecutor(5, TimeUnit.SECONDS)
                            )
                    )
                    .thenCompose(v -> gptClient.getResponse(DIALOG_ID))
                    .thenApply(HHVacancyClassifier::extractAnswer)
                    .exceptionally(ex -> {
                        System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: " + ex.getMessage());
                        return "–Ω–∏—á–µ–≥–æ";
                    });
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    private static String extractAnswer(String response) {
        // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –æ—Ç–≤–µ—Ç ‚Äî —Å—Ç—Ä–æ–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
        return response.trim().replaceAll("[^\\w\\s]", "").trim();
    }
}